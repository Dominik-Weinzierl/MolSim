// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from input.xsd.
 */

#ifndef INPUT_H
#define INPUT_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema {
// anyType and anySimpleType.
//

/**
 * @brief C++ type corresponding to the anyType XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::type Type;

/**
 * @brief C++ type corresponding to the anySimpleType XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::simple_type<char, Type> SimpleType;

/**
 * @brief Alias for the anyType type.
 */
typedef ::xsd::cxx::tree::type Container;


// 8-bit
//

/**
 * @brief C++ type corresponding to the byte XML Schema
 * built-in type.
 */
typedef signed char Byte;

/**
 * @brief C++ type corresponding to the unsignedByte XML Schema
 * built-in type.
 */
typedef unsigned char UnsignedByte;


// 16-bit
//

/**
 * @brief C++ type corresponding to the short XML Schema
 * built-in type.
 */
typedef short Short;

/**
 * @brief C++ type corresponding to the unsignedShort XML Schema
 * built-in type.
 */
typedef unsigned short UnsignedShort;


// 32-bit
//

/**
 * @brief C++ type corresponding to the int XML Schema
 * built-in type.
 */
typedef int Int;

/**
 * @brief C++ type corresponding to the unsignedInt XML Schema
 * built-in type.
 */
typedef unsigned int UnsignedInt;


// 64-bit
//

/**
 * @brief C++ type corresponding to the long XML Schema
 * built-in type.
 */
typedef long long Long;

/**
 * @brief C++ type corresponding to the unsignedLong XML Schema
 * built-in type.
 */
typedef unsigned long long UnsignedLong;


// Supposed to be arbitrary-length integral types.
//

/**
 * @brief C++ type corresponding to the integer XML Schema
 * built-in type.
 */
typedef long long Integer;

/**
 * @brief C++ type corresponding to the nonPositiveInteger XML Schema
 * built-in type.
 */
typedef long long NonPositiveInteger;

/**
 * @brief C++ type corresponding to the nonNegativeInteger XML Schema
 * built-in type.
 */
typedef unsigned long long NonNegativeInteger;

/**
 * @brief C++ type corresponding to the positiveInteger XML Schema
 * built-in type.
 */
typedef unsigned long long PositiveInteger;

/**
 * @brief C++ type corresponding to the negativeInteger XML Schema
 * built-in type.
 */
typedef long long NegativeInteger;


// Boolean.
//

/**
 * @brief C++ type corresponding to the boolean XML Schema
 * built-in type.
 */
typedef bool Boolean;


// Floating-point types.
//

/**
 * @brief C++ type corresponding to the float XML Schema
 * built-in type.
 */
typedef float Float;

/**
 * @brief C++ type corresponding to the double XML Schema
 * built-in type.
 */
typedef double Double;

/**
 * @brief C++ type corresponding to the decimal XML Schema
 * built-in type.
 */
typedef double Decimal;


// String types.
//

/**
 * @brief C++ type corresponding to the string XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::string<char, SimpleType> String;

/**
 * @brief C++ type corresponding to the normalizedString XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::normalized_string<char, String> NormalizedString;

/**
 * @brief C++ type corresponding to the token XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::token<char, NormalizedString> Token;

/**
 * @brief C++ type corresponding to the Name XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::name<char, Token> Name;

/**
 * @brief C++ type corresponding to the NMTOKEN XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::nmtoken<char, Token> Nmtoken;

/**
 * @brief C++ type corresponding to the NMTOKENS XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::nmtokens<char, SimpleType, Nmtoken> Nmtokens;

/**
 * @brief C++ type corresponding to the NCName XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::ncname<char, Name> Ncname;

/**
 * @brief C++ type corresponding to the language XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::language<char, Token> Language;


// ID/IDREF.
//

/**
 * @brief C++ type corresponding to the ID XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::id<char, Ncname> Id;

/**
 * @brief C++ type corresponding to the IDREF XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::idref<char, Ncname, Type> Idref;

/**
 * @brief C++ type corresponding to the IDREFS XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::idrefs<char, SimpleType, Idref> Idrefs;


// URI.
//

/**
 * @brief C++ type corresponding to the anyURI XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::uri<char, SimpleType> Uri;


// Qualified name.
//

/**
 * @brief C++ type corresponding to the QName XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::qname<char, SimpleType, Uri, Ncname> Qname;


// Binary.
//

/**
 * @brief Binary buffer type.
 */
typedef ::xsd::cxx::tree::buffer<char> Buffer;

/**
 * @brief C++ type corresponding to the base64Binary XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::base64_binary<char, SimpleType> Base64Binary;

/**
 * @brief C++ type corresponding to the hexBinary XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::hex_binary<char, SimpleType> HexBinary;


// Date/time.
//

/**
 * @brief Time zone type.
 */
typedef ::xsd::cxx::tree::time_zone TimeZone;

/**
 * @brief C++ type corresponding to the date XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::date<char, SimpleType> Date;

/**
 * @brief C++ type corresponding to the dateTime XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::date_time<char, SimpleType> DateTime;

/**
 * @brief C++ type corresponding to the duration XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::duration<char, SimpleType> Duration;

/**
 * @brief C++ type corresponding to the gDay XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gday<char, SimpleType> Gday;

/**
 * @brief C++ type corresponding to the gMonth XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gmonth<char, SimpleType> Gmonth;

/**
 * @brief C++ type corresponding to the gMonthDay XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gmonth_day<char, SimpleType> GmonthDay;

/**
 * @brief C++ type corresponding to the gYear XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gyear<char, SimpleType> Gyear;

/**
 * @brief C++ type corresponding to the gYearMonth XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gyear_month<char, SimpleType> GyearMonth;

/**
 * @brief C++ type corresponding to the time XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::time<char, SimpleType> Time;


// Entity.
//

/**
 * @brief C++ type corresponding to the ENTITY XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::entity<char, Ncname> Entity;

/**
 * @brief C++ type corresponding to the ENTITIES XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::entities<char, SimpleType, Entity> Entities;

/**
 * @brief Content order sequence entry.
 */
typedef ::xsd::cxx::tree::content_order ContentOrder;
// Namespace information and list stream. Used in
// serialization functions.
//
/**
 * @brief Namespace serialization information.
 */
typedef ::xsd::cxx::xml::dom::namespace_info<char> NamespaceInfo;

/**
 * @brief Namespace serialization information map.
 */
typedef ::xsd::cxx::xml::dom::namespace_infomap<char> NamespaceInfomap;

/**
 * @brief List serialization stream.
 */
typedef ::xsd::cxx::tree::list_stream<char> ListStream;

/**
 * @brief Serialization wrapper for the %double type.
 */
typedef ::xsd::cxx::tree::as_double<Double> AsDouble;

/**
 * @brief Serialization wrapper for the %decimal type.
 */
typedef ::xsd::cxx::tree::as_decimal<Decimal> AsDecimal;

/**
 * @brief Simple type facet.
 */
typedef ::xsd::cxx::tree::facet Facet;

// Flags and properties.
//

/**
 * @brief Parsing and serialization flags.
 */
typedef ::xsd::cxx::tree::flags Flags;

/**
 * @brief Parsing properties.
 */
typedef ::xsd::cxx::tree::properties<char> Properties;

// Parsing/serialization diagnostics.
//

/**
 * @brief Error severity.
 */
typedef ::xsd::cxx::tree::severity Severity;

/**
 * @brief Error condition.
 */
typedef ::xsd::cxx::tree::error<char> Error;

/**
 * @brief List of %error conditions.
 */
typedef ::xsd::cxx::tree::diagnostics<char> Diagnostics;

// Exceptions.
//

/**
 * @brief Root of the C++/Tree %exception hierarchy.
 */
typedef ::xsd::cxx::tree::exception<char> Exception;

/**
 * @brief Exception indicating that the size argument exceeds
 * the capacity argument.
 */
typedef ::xsd::cxx::tree::bounds<char> Bounds;

/**
 * @brief Exception indicating that a duplicate ID value
 * was encountered in the object model.
 */
typedef ::xsd::cxx::tree::duplicate_id<char> DuplicateId;

/**
 * @brief Exception indicating a parsing failure.
 */
typedef ::xsd::cxx::tree::parsing<char> Parsing;

/**
 * @brief Exception indicating that an expected element
 * was not encountered.
 */
typedef ::xsd::cxx::tree::expected_element<char> ExpectedElement;

/**
 * @brief Exception indicating that an unexpected element
 * was encountered.
 */
typedef ::xsd::cxx::tree::unexpected_element<char> UnexpectedElement;

/**
 * @brief Exception indicating that an expected attribute
 * was not encountered.
 */
typedef ::xsd::cxx::tree::expected_attribute<char> ExpectedAttribute;

/**
 * @brief Exception indicating that an unexpected enumerator
 * was encountered.
 */
typedef ::xsd::cxx::tree::unexpected_enumerator<char> UnexpectedEnumerator;

/**
 * @brief Exception indicating that the text content was
 * expected for an element.
 */
typedef ::xsd::cxx::tree::expected_text_content<char> ExpectedTextContent;

/**
 * @brief Exception indicating that a prefix-namespace
 * mapping was not provided.
 */
typedef ::xsd::cxx::tree::no_prefix_mapping<char> NoPrefixMapping;

/**
 * @brief Exception indicating a serialization failure.
 */
typedef ::xsd::cxx::tree::serialization<char> Serialization;

/**
 * @brief Error handler callback interface.
 */
typedef ::xsd::cxx::xml::error_handler<char> ErrorHandler;

/**
 * @brief DOM interaction.
 */
namespace dom {
/**
 * @brief Automatic pointer for DOMDocument.
 */
using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
/**
 * @brief DOM user data key for back pointers to tree nodes.
 */
const XMLCh *const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
}
}

// Forward declarations.
//
class Cuboid_t;
class Vector_t;
class Input_t;
class Simulation_t;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

/**
 * @brief Class corresponding to the %cuboid_t schema type.
 *
 * @nosubgrouping
 */
class Cuboid_t : public ::xml_schema::Type {
 public:
  /**
   * @name Position
   *
   * @brief Accessor and modifier functions for the %Position
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Vector_t PositionType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits<PositionType, char> PositionTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const PositionType &Position() const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  PositionType &Position();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void Position(const PositionType &x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void Position(::std::unique_ptr<PositionType> p);

  //@}

  /**
   * @name distance
   *
   * @brief Accessor and modifier functions for the %distance
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal DistanceType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<DistanceType, char, ::xsd::cxx::tree::schema_type::decimal> DistanceTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const DistanceType &distance() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  DistanceType &distance();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void distance(const DistanceType &x);

  //@}

  /**
   * @name mass
   *
   * @brief Accessor and modifier functions for the %mass
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal MassType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<MassType, char, ::xsd::cxx::tree::schema_type::decimal> MassTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const MassType &mass() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  MassType &mass();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void mass(const MassType &x);

  //@}

  /**
   * @name meanValue
   *
   * @brief Accessor and modifier functions for the %meanValue
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal MeanValueType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<MeanValueType, char, ::xsd::cxx::tree::schema_type::decimal> MeanValueTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const MeanValueType &meanValue() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  MeanValueType &meanValue();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void meanValue(const MeanValueType &x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Cuboid_t(const PositionType &, const DistanceType &, const MassType &, const MeanValueType &);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  Cuboid_t(::std::unique_ptr<PositionType>, const DistanceType &, const MassType &, const MeanValueType &);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Cuboid_t(const ::xercesc::DOMElement &e, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Cuboid_t(const Cuboid_t &x, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Cuboid_t *_clone(::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Cuboid_t &operator=(const Cuboid_t &x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual
  ~Cuboid_t();

  // Implementation.
  //

  //@cond

 protected:
  void parse(::xsd::cxx::xml::dom::parser<char> &, ::xml_schema::Flags);

 protected:
  ::xsd::cxx::tree::one<PositionType> Position_;
  ::xsd::cxx::tree::one<DistanceType> distance_;
  ::xsd::cxx::tree::one<MassType> mass_;
  ::xsd::cxx::tree::one<MeanValueType> meanValue_;

  //@endcond
};

/**
 * @brief Class corresponding to the %vector_t schema type.
 *
 * @nosubgrouping
 */
class Vector_t : public ::xml_schema::Type {
 public:
  /**
   * @name x
   *
   * @brief Accessor and modifier functions for the %x
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal XType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<XType, char, ::xsd::cxx::tree::schema_type::decimal> XTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const XType &x() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  XType &x();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void x(const XType &x);

  //@}

  /**
   * @name y
   *
   * @brief Accessor and modifier functions for the %y
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal YType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<YType, char, ::xsd::cxx::tree::schema_type::decimal> YTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const YType &y() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  YType &y();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void y(const YType &x);

  //@}

  /**
   * @name z
   *
   * @brief Accessor and modifier functions for the %z
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal ZType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<ZType, char, ::xsd::cxx::tree::schema_type::decimal> ZTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ZType &z() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ZType &z();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void z(const ZType &x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Vector_t(const XType &, const YType &, const ZType &);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Vector_t(const ::xercesc::DOMElement &e, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Vector_t(const Vector_t &x, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Vector_t *_clone(::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Vector_t &operator=(const Vector_t &x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual
  ~Vector_t();

  // Implementation.
  //

  //@cond

 protected:
  void parse(::xsd::cxx::xml::dom::parser<char> &, ::xml_schema::Flags);

 protected:
  ::xsd::cxx::tree::one<XType> x_;
  ::xsd::cxx::tree::one<YType> y_;
  ::xsd::cxx::tree::one<ZType> z_;

  //@endcond
};

/**
 * @brief Class corresponding to the %input_t schema type.
 *
 * @nosubgrouping
 */
class Input_t : public ::xml_schema::Type {
 public:
  /**
   * @name location
   *
   * @brief Accessor and modifier functions for the %location
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LocationType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<LocationType, char> LocationTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const LocationType &location() const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  LocationType &location();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void location(const LocationType &x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void location(::std::unique_ptr<LocationType> p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Input_t(const LocationType &);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Input_t(const ::xercesc::DOMElement &e, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Input_t(const Input_t &x, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Input_t *_clone(::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Input_t &operator=(const Input_t &x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual
  ~Input_t();

  // Implementation.
  //

  //@cond

 protected:
  void parse(::xsd::cxx::xml::dom::parser<char> &, ::xml_schema::Flags);

 protected:
  ::xsd::cxx::tree::one<LocationType> location_;

  //@endcond
};

/**
 * @brief Class corresponding to the %simulation_t schema type.
 *
 * @nosubgrouping
 */
class Simulation_t : public ::xml_schema::Type {
 public:
  /**
   * @name Cuboid
   *
   * @brief Accessor and modifier functions for the %Cuboid
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Cuboid_t CuboidType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence<CuboidType> CuboidSequence;

  /**
   * @brief Element iterator type.
   */
  typedef CuboidSequence::iterator CuboidIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef CuboidSequence::const_iterator CuboidConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits<CuboidType, char> CuboidTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const CuboidSequence &Cuboid() const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  CuboidSequence &Cuboid();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void Cuboid(const CuboidSequence &s);

  //@}

  /**
   * @name Source
   *
   * @brief Accessor and modifier functions for the %Source
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Input_t SourceType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence<SourceType> SourceSequence;

  /**
   * @brief Element iterator type.
   */
  typedef SourceSequence::iterator SourceIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef SourceSequence::const_iterator SourceConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits<SourceType, char> SourceTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const SourceSequence &Source() const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  SourceSequence &Source();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void Source(const SourceSequence &s);

  //@}

  /**
   * @name endTime
   *
   * @brief Accessor and modifier functions for the %endTime
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal EndTimeType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional<EndTimeType> EndTimeOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<EndTimeType, char, ::xsd::cxx::tree::schema_type::decimal> EndTimeTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const EndTimeOptional &endTime() const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  EndTimeOptional &endTime();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void endTime(const EndTimeType &x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void endTime(const EndTimeOptional &x);

  //@}

  /**
   * @name deltaT
   *
   * @brief Accessor and modifier functions for the %deltaT
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Decimal DeltaTType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional<DeltaTType> DeltaTOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<DeltaTType, char, ::xsd::cxx::tree::schema_type::decimal> DeltaTTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DeltaTOptional &deltaT() const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DeltaTOptional &deltaT();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void deltaT(const DeltaTType &x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void deltaT(const DeltaTOptional &x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional<NameType> NameOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits<NameType, char> NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const NameOptional &name() const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  NameOptional &name();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void name(const NameType &x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void name(const NameOptional &x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void name(::std::unique_ptr<NameType> p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Simulation_t();

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Simulation_t(const ::xercesc::DOMElement &e, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Simulation_t(const Simulation_t &x, ::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Simulation_t *_clone(::xml_schema::Flags f = 0, ::xml_schema::Container *c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Simulation_t &operator=(const Simulation_t &x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual
  ~Simulation_t();

  // Implementation.
  //

  //@cond

 protected:
  void parse(::xsd::cxx::xml::dom::parser<char> &, ::xml_schema::Flags);

 protected:
  CuboidSequence Cuboid_;
  SourceSequence Source_;
  EndTimeOptional endTime_;
  DeltaTOptional deltaT_;
  NameOptional name_;

  //@endcond
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

/**
 * @name Parsing functions for the %Simulation document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr<::Simulation_t> Simulation(const ::std::string &uri, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(const ::std::string &uri, ::xml_schema::ErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(const ::std::string &uri, ::xercesc::DOMErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, ::xml_schema::ErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, ::xercesc::DOMErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, const ::std::string &id, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, const ::std::string &id,
                                             ::xml_schema::ErrorHandler &eh, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::std::istream &is, const ::std::string &id,
                                             ::xercesc::DOMErrorHandler &eh, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr<::Simulation_t> Simulation(::xercesc::InputSource &is, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::xercesc::InputSource &is, ::xml_schema::ErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr<::Simulation_t> Simulation(::xercesc::InputSource &is, ::xercesc::DOMErrorHandler &eh,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 */
::std::unique_ptr<::Simulation_t> Simulation(const ::xercesc::DOMDocument &d, ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::unique_ptr<::Simulation_t> Simulation(::xml_schema::dom::unique_ptr<::xercesc::DOMDocument> d,
                                             ::xml_schema::Flags f = 0,
                                             const ::xml_schema::Properties &p = ::xml_schema::Properties());

//@}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void operator<<(::xercesc::DOMElement &, const Cuboid_t &);

void operator<<(::xercesc::DOMElement &, const Vector_t &);

void operator<<(::xercesc::DOMElement &, const Input_t &);

void operator<<(::xercesc::DOMElement &, const Simulation_t &);

/**
 * @name Serialization functions for the %Simulation document root.
 */
//@{

/**
 * @brief Serialize to a standard output stream.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void Simulation(::std::ostream &os, const ::Simulation_t &x,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with an error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void Simulation(::std::ostream &os, const ::Simulation_t &x, ::xml_schema::ErrorHandler &eh,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with a Xerces-C++ DOM
 * error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void Simulation(::std::ostream &os, const ::Simulation_t &x, ::xercesc::DOMErrorHandler &eh,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void Simulation(::xercesc::XMLFormatTarget &ft, const ::Simulation_t &x,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with an error
 * handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void Simulation(::xercesc::XMLFormatTarget &ft, const ::Simulation_t &x, ::xml_schema::ErrorHandler &eh,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with a
 * Xerces-C++ DOM error handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void Simulation(::xercesc::XMLFormatTarget &ft, const ::Simulation_t &x, ::xercesc::DOMErrorHandler &eh,
                const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                const ::std::string &e = "UTF-8", ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to an existing Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param x An object model to serialize.
 * @param f Serialization flags.
 *
 * Note that it is your responsibility to create the DOM document
 * with the correct root element as well as set the necessary
 * namespace mapping attributes.
 */
void Simulation(::xercesc::DOMDocument &d, const ::Simulation_t &x, ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a new Xerces-C++ DOM document.
 *
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param f Serialization flags.
 * @return A pointer to the new Xerces-C++ DOM document.
 */
::xml_schema::dom::unique_ptr<::xercesc::DOMDocument> Simulation(const ::Simulation_t &x,
                                                                 const ::xml_schema::NamespaceInfomap &m = ::xml_schema::NamespaceInfomap(),
                                                                 ::xml_schema::Flags f = 0);

//@}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INPUT_H
