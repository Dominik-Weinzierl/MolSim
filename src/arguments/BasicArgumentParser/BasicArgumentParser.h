#pragma once
#include "arguments/ArgumentParser.h"

#include <optional>
#include <vector>

/**
 * BasicArgumentParser is a parser for arguments via commandline.
 */
class BasicArgumentParser : public ArgumentParser {
 private:
  /**
   * Tokens is a Vector of Strings generated by the provided arguments
  */
  std::vector<std::string> tokens;

  /**
   * Gives the value of the specified option.
   * @param option the option, for which the value is to be returned.
   * @return the value of the specified option or std::nullopt, if no value was specified.
   */
  [[nodiscard]] std::optional<std::string> getValueOfArgumentOption(const std::string &option) const;

  /**
   * Checks whether the option is an element of the tokens Vector.
   * @param option is an argument flag.
   * @return true if the option is an element of the tokens Vector.
   */
  [[nodiscard]] bool argumentOptionIsAvailable(const std::string &option) const;

 public:

  /**
   * BasicArgumentsParser is a constructor that takes arguments provided by the main-method.
   * @param argc
   * @param arguments
   */
  explicit BasicArgumentParser(int argc, char *arguments[]);

  /**
   * Prints the available flag-options.
   */
  void showUsage() override;

  /**
   * Validates the arguments via the argumentOptionIsAvailable-Method.
   * @return Member of enum ParserStatus, which is used in the main-Method to catch errors.
   */
  ParserStatus validateInput() override;

  /**
   * Creates an Argument via the getValueOfArgumentOption-Method.
   * @return Optional Argument.
   */
  std::optional<Argument> createArgument() override;
};
