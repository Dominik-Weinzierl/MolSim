#pragma once

#include <optional>
#include <memory>
#include "Argument.h"
#include <tuple>

class ArgumentStatus {
 private:

  /**
   * Required arguments
   */
  std::tuple<bool, std::string, std::string> inputFileName;

  /**
  * Optional arguments
  */

 public:
  ArgumentStatus() = default;
  /**
   * Destructor generated by the compiler.
   */
  virtual ~ArgumentStatus() = default;

  std::tuple<bool, std::string, std::string> &getInputFileName();

  void setInputFileName(const std::string &flag, const std::string &value);

  virtual bool validStatus();
};

/**
 * ArgumentParser is an extendable parser for arguments via commandline or configuration file.
 */
class ArgumentParser {
 protected:
  /**
  * Validates the arguments
  * @return bool
  */
  virtual bool validateInput() = 0;
 public:
  /**
   * Destructor generated by the compiler.
   */
  virtual ~ArgumentParser() = default;

  /**
   * Creates an Argument via the getValueOfArgumentOption-Method.
   * @return Argument.
   */
  virtual std::unique_ptr<Argument> createArgument() = 0;

  /**
   * Prints the available flag-options.
   */
  virtual void showUsage() = 0;

  /**
   * Handle the filename flag and sets the status accordingly.
   */
  virtual void handleInputFileFlag(ArgumentStatus &status, const std::string &flag, const std::string &possibleValue);
};
