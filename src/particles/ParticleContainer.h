#pragma once

#include "Particle.h"
#include <vector>

/**
 * ParticleContainer is a container for particles that provides functions to iterate over single particles and pairs.
 */
class ParticleContainer {
 private:

  /**
   * Particles-Vector Stores all particles.
   */
  std::vector<Particle> particles;

 public:

  /**
   * Default Constructor.
   */
  ParticleContainer();

  /**
   * Default Destructor.
   */
  virtual ~ParticleContainer();

  /**
   * Constructs a ParticleContainer from the provided vector of particles.
   * @param particles
   */
  explicit ParticleContainer(std::vector<Particle> particles);

  /**
   * Copy Constructor generated by the compiler.
   * @param particleContainer
   */
  ParticleContainer(const ParticleContainer &particleContainer) = default;

  /**
   * Adds the particle to the ParticleContainer.
   * @param p The particle to be added.
   */
  void addParticle(Particle p);

  [[nodiscard]] std::vector<Particle> &getParticles();

  /**
   * @return Size of the particle-Vector.
   */
  [[nodiscard]] unsigned long size() const;

  /**
   * @return Iterator to the beginning of the particles-Vector.
   */
  [[nodiscard]] auto begin() { return particles.begin(); }

  /**
   * @return Iterator to the end of the particles-Vector.
   */
  [[nodiscard]] auto end() { return particles.end(); }

  /**
 * Operator that allows mutable member access.
 * @param i Index for member access.
 * @return
 */
  Particle &operator[](unsigned long i);

  /**
   * Operator that allows immutable member access.
   * @param i Index for member access.
   * @return
   */
  Particle operator[](unsigned long i) const;
};