#pragma once

#include <string>
#include <utility>
#include <filesystem>

#include "container/ParticleContainer.h"
#include "particles/Particle.h"

/**
 * OutputWriter is an extendable file writer for simulation states.
 * @tparam dim dimension of our simulation.
 */
template<size_t dim>
class OutputWriter {
 protected:
  const std::string fileName;
  const std::string path;
  ParticleContainer<dim> &container;

 public:

  //----------------------------------------Constructor & Destructor----------------------------------------

  /**
   * Constructs an OutputWriter to create files.
   * @param pFileName output filename
   * @param pPath output path
   * @param pContainer ParticleContainer with a Vector that contains all Particle(s).
   */
  OutputWriter(std::string pFileName, std::string pPath, ParticleContainer<dim> &pContainer) : fileName{
      std::move(pFileName)}, path{std::move(pPath)}, container{pContainer} {
    if (!std::filesystem::exists(path)) {
      std::filesystem::create_directory(path);
    }
  }

  /**
   * Constructs an OutputWriter without additional folder.
   * @param pPath output path
   * @param pContainer ParticleContainer with a Vector that contains all Particle(s).
   */
  OutputWriter(std::string pPath, ParticleContainer<dim> &pContainer) : path{std::move(pPath)},
                                                                        container{pContainer} {};

  /**
   * Destructor generated by the compiler.
   */
  virtual ~OutputWriter() = default;

  //----------------------------------------Methods----------------------------------------

  /**
   * Writes the information about the given iteration into the file.
   * @param iteration current iteration of the simulation
   */
  virtual void writeFile(int iteration) = 0;
};
